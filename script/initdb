#!/usr/bin/env perl

# Copyright (C) 2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

BEGIN {
    use FindBin qw($Bin);
    use lib "$Bin/../lib", "$Bin/../lib/OpenQA/modules";
}

use strict;
use warnings;
use DBIx::Class::DeploymentHandler;
use File::Basename qw/dirname/;
use POSIX qw/getuid getgid setuid setgid/;
use openqa ();
use Schema::Schema;
use IO::Dir;
use SQL::SplitStatement;
use Fcntl ':mode';
use Getopt::Long;

sub execute_sql_file {
    my $sqlfile = shift;
    print "Executing SQL statements from: $sqlfile\n";

    open my $fh, '<', $sqlfile or die "error opening $sqlfile: $!";
    my $contents = do { local $/; <$fh> };

    my $sql_splitter = SQL::SplitStatement->new;
    my @statements = $sql_splitter->split($contents);

    my $dbh = DBI->connect("dbi:SQLite:dbname=$openqa::dbfile") or die $DBI::errstr;
    $dbh->do("BEGIN TRANSACTION");
    foreach (@statements) {
        print "$_\n";

        unless ($dbh->do($_)) {
            print "ROLLBACK;\n";
            $dbh->do("ROLLBACK");
            die;
        }
    }
    $dbh->do("COMMIT");
}

my $help=0;
my $prepare_init=0;
my $init_database=0;

my $result = GetOptions(
    "help"                        => \$help,
    "prepare_init"            => \$prepare_init,
    "init_database"            => \$init_database
);

if (!$prepare_init and !$init_database) {
    $help=1;
}

if ($help) {
    print "Usage: $0 [flags]\n\n";
    print "  --prepare_init  : Create the deployment files used to initialize the database.\n";
    print "                    Don't forget to increase the version before using this\n";
    print "                    and note those files should be commited to the source repo.\n";
    print "  --init_database : Use the generated deployment files created with --prepare_init\n";
    print "                    to actually initialize a database.\n";
    print "  --help          : This help message.\n";
    exit;
}

my $dbdir = dirname($openqa::dbfile);
die "$dbdir does not exist\n" unless -d $dbdir;
my @s = stat(_);
if (getgid() != $s[5]) {
    setgid($s[5]) or die "can't change gid to $s[5]: $!\n";
}
if (getuid() != $s[4]) {
    setuid($s[4]) or die "can't change uid to $s[4]: $!\n";
}

my $script_directory = "$FindBin::Bin/../dbicdh";
my $schema = openqa::connect_db();
my $dh = DBIx::Class::DeploymentHandler->new(
    {
        schema              => $schema,
        script_directory    => $script_directory,
        databases           => 'SQLite',
        sql_translator_args => { add_drop_table => 1 },
        force_overwrite     => 0,
    }
);

if ($prepare_init) {
    $dh->prepare_install;
}
if ($init_database) {
    # Create the schema
    $dh->install;

    # Deploy fixtures specified programatically in the schema
    $schema->deploy_fixtures;

    # Deploy fixtures specified statically in the fixtures directory
    my $version = $dh->schema_version;
    my %fixture_deploy_dir;
    tie %fixture_deploy_dir, 'IO::Dir', "$script_directory/fixtures/deploy/$version";

    foreach (keys %fixture_deploy_dir) {
        if ( S_ISREG($fixture_deploy_dir{$_}->mode) ) {
            execute_sql_file("$script_directory/fixtures/deploy/$version/$_");
        }
    }
}

# vim: set sw=4 sts=4 et:
